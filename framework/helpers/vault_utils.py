"""
Function to authenticate with the cyber ark instance using certificate and key
"""
import sys
from framework.helpers.log_utils import get_logger
from framework.helpers.rest_utils import RestAPIUtil

logger = get_logger(__name__)


class CyberArk:
    def __init__(self, host: str, port: str, cert_file: str, cert_key: str):
        self.cert_file = cert_file
        self.cert_key = cert_key
        self.logger = logger
        self.session = RestAPIUtil(ip_address=host, user=None, pwd=None, port=port)

    def generate_auth_token(self, cyber_ark_user, password_path):
        """
        Generate authenticate token for cyberark for a session
        params:
        cyber_ark_user: session username
        password_path: file path of the password.txt file
        """
        cyber_ark_pwd = open(password_path).read()
        uri = "PasswordVault/API/Auth/CyberArk/Logon"
        data = {"username": cyber_ark_user, "password": cyber_ark_pwd}
        try:
            if self.cert_file:
                return self.session.post(uri, data=data, verify=self.cert_file, cert=(self.cert_file, self.cert_key))
            else:
                return self.session.post(uri, data=data)
        except Exception as e:
            logger.error(f"Failed to generate authentication token for CyberArk. Error is: {e}")
            sys.exit()

    def fetch_creds(self, auth_token, username, app_id, safe, address):
        """
        Fetch password from the vault.
        params:
        auth_token: token generated by generate_auth_token func
        username: account name
        app_id: application id
        safe: safe name where the account is saved
        address: address of the entity
        return: password of the account
        """
        uri = f'AIMWebService/api/Accounts?AppId={app_id}&Query=Safe={safe};UserName={username};Address={address}'
        data = {'Authorization': auth_token}
        try:
            user_pwd_details = self.session.get(uri, data=data, verify=self.cert_file, cert=(self.cert_file, self.cert_key))
            return user_pwd_details.get('Content')
        except Exception as e:
            logger.error(f"Failed to fetch password for user: {username}. Error is: {e}")

    def session_log_off(self):
        """
        log off from the active session
        """
        self.session.post('PasswordVault/API/Auth/LogOff')
